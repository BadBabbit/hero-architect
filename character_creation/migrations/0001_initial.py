# Generated by Django 5.0.1 on 2024-03-02 13:59

import character_creation.models
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('abbreviation', models.CharField(max_length=3)),
                ('description', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('cost_value', models.PositiveSmallIntegerField(default=1)),
                ('cost_unit', models.CharField(choices=[('CP', 'Copper'), ('SP', 'Silver'), ('GP', 'Gold')], default='CP')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Proficiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_name', models.CharField()),
                ('description', models.TextField()),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('character_level', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('inventory', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='ERR_NO_NAME', unique=True)),
                ('type', models.CharField(choices=[('S', 'Standard'), ('E', 'Exotic')])),
                ('typical_speakers', models.CharField(default='')),
                ('script', models.CharField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='Trait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('desc', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='AbilityScoreBonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bonus', models.PositiveSmallIntegerField(default=1)),
                ('ability', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.ability')),
            ],
        ),
        migrations.CreateModel(
            name='AdventuringGear',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.item')),
                ('description', models.TextField(default='')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.item',),
        ),
        migrations.CreateModel(
            name='Armour',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.item')),
                ('armour_type', models.CharField(choices=[('L', 'Light'), ('M', 'Medium'), ('H', 'Heavy'), ('S', 'Shield')], max_length=1)),
                ('strength_requirement', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('ac', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('ac_dex_bonus', models.BooleanField(default=False)),
                ('ac_dex_bonus_max', models.SmallIntegerField(default=0)),
                ('stealth_disadvantage', models.BooleanField(default=False)),
                ('weight', models.CharField(default='', help_text='weight of the armour, measured in pounds (lbs).', max_length=5)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.item',),
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.item')),
                ('description', models.TextField(default='')),
                ('is_artisan_tool', models.BooleanField()),
                ('is_gaming_set', models.BooleanField()),
                ('is_instrument', models.BooleanField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.item',),
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.item')),
                ('damage_dice', models.CharField(blank=True, choices=[('D004', 'd4'), ('D006', 'd6'), ('D008', 'd8'), ('D010', 'd10'), ('D012', 'd12'), ('D020', 'd20'), ('D100', 'd100')], default='', max_length=4, null=True)),
                ('num_dice', models.PositiveSmallIntegerField(blank=True, default=1, null=True)),
                ('damage_type', models.CharField(blank=True, choices=[('FI', 'fire'), ('BL', 'bludgeoning'), ('RA', 'radiant'), ('NE', 'necrotic'), ('PS', 'psychic'), ('CO', 'cold'), ('FO', 'force'), ('EL', 'elemental'), ('LI', 'lightning'), ('PI', 'piercing'), ('TH', 'thunder'), ('AC', 'acid'), ('PO', 'poison'), ('SL', 'slashing'), ('PH', 'physical')], default='', null=True)),
                ('martial', models.BooleanField(default=False)),
                ('two_handed', models.BooleanField(default=False)),
                ('is_heavy', models.BooleanField(default=False)),
                ('is_light', models.BooleanField(default=False)),
                ('has_reach', models.BooleanField(default=False)),
                ('is_special', models.BooleanField(default=False)),
                ('special_desc', models.TextField(default='')),
                ('versatile', models.BooleanField(default=False)),
                ('versatile_damage_dice', models.CharField(blank=True, choices=[('D004', 'd4'), ('D006', 'd6'), ('D008', 'd8'), ('D010', 'd10'), ('D012', 'd12'), ('D020', 'd20'), ('D100', 'd100')], default='', max_length=4, null=True)),
                ('is_finesse', models.BooleanField(default=False)),
                ('thrown', models.BooleanField(default=False)),
                ('effective_range', models.SmallIntegerField(blank=True, null=True)),
                ('max_range', models.SmallIntegerField(blank=True, null=True)),
                ('requires_ammunition', models.BooleanField(default=False)),
                ('requires_loading', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.item',),
        ),
        migrations.CreateModel(
            name='CharacterSubclass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('superclass', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.characterclass')),
            ],
        ),
        migrations.CreateModel(
            name='ClassInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_level', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.character')),
                ('class_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.characterclass')),
                ('subclass_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.charactersubclass')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='equipment_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='character_creation.equipmentcategory'),
        ),
        migrations.CreateModel(
            name='EquipmentPack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('cost', models.PositiveSmallIntegerField(help_text='cost in gold (gp)')),
                ('description', models.TextField()),
                ('items', models.ManyToManyField(related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='character_creation.item')),
            ],
        ),
        migrations.CreateModel(
            name='LanguageChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField()),
                ('language_option', models.ManyToManyField(to='character_creation.language')),
            ],
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('messages', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.message')),
            ],
        ),
        migrations.CreateModel(
            name='ProficiencyOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency', models.ManyToManyField(help_text='description of the contents of this option', to='character_creation.proficiency')),
            ],
        ),
        migrations.CreateModel(
            name='ProficiencyChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desc', models.TextField(help_text='description of the choice to be made')),
                ('options', models.ManyToManyField(to='character_creation.proficiencyoption')),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('size', models.CharField(choices=[('T', 'Tiny'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('H', 'Huge'), ('G', 'Gargantuan')], max_length=1)),
                ('size_desc', models.TextField(default='')),
                ('alignment_desc', models.TextField(default='')),
                ('speed_walking', models.PositiveSmallIntegerField(default=30, validators=[character_creation.models.validate_mod_five])),
                ('speed_flying', models.PositiveSmallIntegerField(default=0, validators=[character_creation.models.validate_mod_five])),
                ('speed_burrowing', models.PositiveSmallIntegerField(default=0, validators=[character_creation.models.validate_mod_five])),
                ('speed_swimming', models.PositiveSmallIntegerField(default=0, validators=[character_creation.models.validate_mod_five])),
                ('speed_climbing', models.PositiveSmallIntegerField(default=0, validators=[character_creation.models.validate_mod_five])),
                ('age_desc', models.CharField()),
                ('language_desc', models.TextField(default='')),
                ('ability_score_bonuses', models.ManyToManyField(to='character_creation.abilityscorebonus')),
                ('languages', models.ManyToManyField(to='character_creation.language')),
                ('starting_proficiencies', models.ManyToManyField(blank=True, to='character_creation.proficiency')),
                ('traits', models.ManyToManyField(blank=True, to='character_creation.trait')),
            ],
        ),
        migrations.AddField(
            model_name='character',
            name='race',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.race'),
        ),
        migrations.CreateModel(
            name='SavingThrow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('ability', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.ability')),
            ],
        ),
        migrations.CreateModel(
            name='SavingThrowProficiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('saving_throw', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.savingthrow')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('desc', models.TextField(default='')),
                ('ability', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.ability')),
            ],
        ),
        migrations.CreateModel(
            name='SkillProficiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.skill')),
            ],
        ),
        migrations.CreateModel(
            name='Subrace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('desc', models.TextField(blank=True, default='')),
                ('ability_score_bonuses', models.ManyToManyField(to='character_creation.abilityscorebonus')),
                ('languages', models.ManyToManyField(blank=True, to='character_creation.language')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.race')),
                ('starting_proficiencies', models.ManyToManyField(blank=True, to='character_creation.proficiency')),
                ('traits', models.ManyToManyField(blank=True, to='character_creation.trait')),
            ],
        ),
        migrations.AddField(
            model_name='character',
            name='subrace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.subrace'),
        ),
        migrations.CreateModel(
            name='ArmourProficiency',
            fields=[
                ('proficiency_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.proficiency')),
                ('armour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.armour')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.proficiency',),
        ),
        migrations.CreateModel(
            name='ToolProficiency',
            fields=[
                ('proficiency_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.proficiency')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.tool')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.proficiency',),
        ),
        migrations.CreateModel(
            name='WeaponProficiency',
            fields=[
                ('proficiency_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.proficiency')),
                ('weapon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.weapon')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.proficiency',),
        ),
    ]
