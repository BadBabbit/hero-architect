# Generated by Django 5.0 on 2024-01-17 14:17

import character_creation.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('value_gold', models.PositiveIntegerField()),
                ('value_silver', models.PositiveIntegerField()),
                ('value_copper', models.PositiveIntegerField()),
                ('weight', models.CharField(default='', help_text='weight of the item, measured in pounds (lbs).', max_length=5)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Proficiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency_name', models.CharField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CharacterProficiencies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acrobatics_prof', models.BooleanField(default=False)),
                ('animal_handling_prof', models.BooleanField(default=False)),
                ('arcana_prof', models.BooleanField(default=False)),
                ('athletics_prof', models.BooleanField(default=False)),
                ('deception_prof', models.BooleanField(default=False)),
                ('history_prof', models.BooleanField(default=False)),
                ('insight_prof', models.BooleanField(default=False)),
                ('intimidation_prof', models.BooleanField(default=False)),
                ('investigation_prof', models.BooleanField(default=False)),
                ('medicine_prof', models.BooleanField(default=False)),
                ('nature_prof', models.BooleanField(default=False)),
                ('perception_prof', models.BooleanField(default=False)),
                ('performance_prof', models.BooleanField(default=False)),
                ('persuasion_prof', models.BooleanField(default=False)),
                ('religion_prof', models.BooleanField(default=False)),
                ('sleight_of_hand_prof', models.BooleanField(default=False)),
                ('stealth_prof', models.BooleanField(default=False)),
                ('survival_prof', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CharacterProficiencyCustomValues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acrobatics_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('animal_handling_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('arcana_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('athletics_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('deception_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('history_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('insight_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('intimidation_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('investigation_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('medicine_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('nature_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('perception_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('performance_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('persuasion_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('religion_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('sleight_of_hand_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('stealth_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('survival_val', models.SmallIntegerField(default=None, null=True, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='EquipmentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('desc', models.TextField()),
                ('type', models.CharField(choices=[('S', 'Standard'), ('E', 'Exotic')])),
                ('typical_speakers', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('size', models.CharField(choices=[('T', 'Tiny'), ('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('H', 'Huge'), ('G', 'Gargantuan')], max_length=1)),
                ('size_desc', models.TextField()),
                ('speed_walking', models.PositiveSmallIntegerField(validators=[character_creation.models.validate_mod_five])),
                ('speed_flying', models.PositiveSmallIntegerField(validators=[character_creation.models.validate_mod_five])),
                ('speed_burrowing', models.PositiveSmallIntegerField(validators=[character_creation.models.validate_mod_five])),
                ('speed_swimming', models.PositiveSmallIntegerField(validators=[character_creation.models.validate_mod_five])),
                ('speed_climbing', models.PositiveSmallIntegerField(validators=[character_creation.models.validate_mod_five])),
                ('desc_short', models.CharField(max_length=500)),
                ('desc_long', models.CharField()),
                ('age_desc', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='RawStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strength', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('constitution', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('dexterity', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('wisdom', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('intelligence', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('charisma', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
            ],
        ),
        migrations.CreateModel(
            name='SavingThrow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='Statistic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('abbreviation', models.CharField(max_length=3)),
                ('description', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='AdventuringGear',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.item')),
                ('description', models.TextField(default='')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.item',),
        ),
        migrations.CreateModel(
            name='Armour',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.item')),
                ('armor_type', models.CharField(choices=[('L', 'Light'), ('M', 'Medium'), ('H', 'Heavy'), ('S', 'Shield')], max_length=1)),
                ('description', models.TextField(default='')),
                ('strength_requirement', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('ac', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('ac_dex_bonus', models.BooleanField()),
                ('ac_dex_bonus_max', models.SmallIntegerField(default=0)),
                ('stealth_disadvantage', models.BooleanField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.item',),
        ),
        migrations.CreateModel(
            name='MagicItem',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.item')),
                ('description_header', models.TextField(default='')),
                ('description_body', models.TextField(default='')),
                ('requires_attunement', models.BooleanField(default=False)),
                ('rarity', models.CharField(choices=[('C', 'Common'), ('U', 'Uncommon'), ('R', 'Rare'), ('V', 'Very rare'), ('L', 'Legendary')], max_length=1)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.item',),
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.item')),
                ('description', models.TextField(default='')),
                ('is_artisan_tool', models.BooleanField()),
                ('is_gaming_set', models.BooleanField()),
                ('is_instrument', models.BooleanField()),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.item',),
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.item')),
                ('damage_dice', models.CharField(blank=True, choices=[('D004', 'd4'), ('D006', 'd6'), ('D008', 'd8'), ('D010', 'd10'), ('D012', 'd12'), ('D020', 'd20'), ('D100', 'd100')], default='', max_length=4, null=True)),
                ('num_dice', models.PositiveSmallIntegerField(blank=True, default=1, null=True)),
                ('damage_type', models.CharField(blank=True, choices=[('FI', 'fire'), ('BL', 'bludgeoning'), ('RA', 'radiant'), ('NE', 'necrotic'), ('PS', 'psychic'), ('CO', 'cold'), ('FO', 'force'), ('EL', 'elemental'), ('LI', 'lightning'), ('PI', 'piercing'), ('TH', 'thunder'), ('AC', 'acid'), ('PO', 'poison'), ('SL', 'slashing'), ('PH', 'physical')], default='', max_length=2, null=True)),
                ('martial', models.BooleanField(default=False)),
                ('two_handed', models.BooleanField(default=False)),
                ('is_heavy', models.BooleanField(default=False)),
                ('is_light', models.BooleanField(default=False)),
                ('has_reach', models.BooleanField(default=False)),
                ('is_special', models.BooleanField(default=False)),
                ('special_desc', models.TextField(default='')),
                ('versatile', models.BooleanField(default=False)),
                ('versatile_damage_dice', models.CharField(choices=[('D004', 'd4'), ('D006', 'd6'), ('D008', 'd8'), ('D010', 'd10'), ('D012', 'd12'), ('D020', 'd20'), ('D100', 'd100')], default=None, max_length=4, null=True)),
                ('is_finesse', models.BooleanField(default=False)),
                ('thrown', models.BooleanField(default=False)),
                ('effective_range', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('max_range', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('requires_ammunition', models.BooleanField(default=False)),
                ('requires_loading', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('character_creation.item',),
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('character_level', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('inventory', models.TextField()),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.race')),
                ('raw_stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.rawstats')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterSubclass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('superclass', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.characterclass')),
            ],
        ),
        migrations.CreateModel(
            name='ClassInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_level', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.character')),
                ('class_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.characterclass')),
                ('subclass_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.charactersubclass')),
            ],
        ),
        migrations.AddField(
            model_name='item',
            name='equipment_category',
            field=models.ManyToManyField(to='character_creation.equipmentcategory'),
        ),
        migrations.CreateModel(
            name='EquipmentPack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('cost', models.PositiveSmallIntegerField(help_text='cost in gold (gp)')),
                ('description', models.TextField()),
                ('items', models.ManyToManyField(related_name='%(app_label)s_%(class)s_related', related_query_name='%(app_label)s_%(class)ss', to='character_creation.item')),
            ],
        ),
        migrations.CreateModel(
            name='LanguageChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField()),
                ('language_option', models.ManyToManyField(to='character_creation.language')),
            ],
        ),
        migrations.CreateModel(
            name='ProficiencyOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proficiency', models.ManyToManyField(help_text='description of the contents of this option', to='character_creation.proficiency')),
            ],
        ),
        migrations.CreateModel(
            name='ProficiencyChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('desc', models.TextField(help_text='description of the choice to be made')),
                ('options', models.ManyToManyField(to='character_creation.proficiencyoption')),
            ],
        ),
        migrations.CreateModel(
            name='SavingThrowProficiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('saving_throw', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.savingthrow')),
            ],
        ),
        migrations.CreateModel(
            name='SkillProficiency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.skill')),
            ],
        ),
        migrations.AddField(
            model_name='skill',
            name='statistic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.statistic'),
        ),
        migrations.AddField(
            model_name='savingthrow',
            name='statistic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.statistic'),
        ),
        migrations.CreateModel(
            name='Subrace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.race')),
            ],
        ),
        migrations.AddField(
            model_name='character',
            name='subrace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='character_creation.subrace'),
        ),
        migrations.CreateModel(
            name='Trait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(unique=True)),
                ('desc', models.TextField()),
                ('races', models.ManyToManyField(to='character_creation.race')),
            ],
        ),
        migrations.CreateModel(
            name='ArmourProficiency',
            fields=[
                ('proficiency_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.proficiency')),
                ('armour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.armour')),
            ],
            bases=('character_creation.proficiency',),
        ),
        migrations.CreateModel(
            name='ToolProficiency',
            fields=[
                ('proficiency_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.proficiency')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.tool')),
            ],
            bases=('character_creation.proficiency',),
        ),
        migrations.CreateModel(
            name='WeaponProficiency',
            fields=[
                ('proficiency_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='character_creation.proficiency')),
                ('weapon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='character_creation.weapon')),
            ],
            bases=('character_creation.proficiency',),
        ),
    ]
